{"version":3,"sources":["bar.js","visualizer.js","App.js","serviceWorker.js","index.js"],"names":["Bar","props","className","style","width","height","backgroundColor","color","fillArray","value","len","arr","Array","i","Visualizer","state","array","from","keys","colors","totalWidth","totalHeight","barWidth","length","barHeight","tempArr","JSON","parse","stringify","states","delays","iter","j","push","temp","setTimeout","setState","Math","floor","random","this","console","log","auxList","map","index","key","onClick","shuffle","bubbleSort","insertionSort","alert","quickSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf3cd576.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Bar(props) {\r\n    return (\r\n        <div\r\n            className=\"bar\"\r\n            style={{\r\n                width: `${props.width}vw`,\r\n                height: `${props.height}vh`,\r\n                backgroundColor: `${props.color}`,\r\n            }}\r\n        >\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default Bar;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Bar from './bar';\r\n\r\nconst listSize        = 10;\r\nconst delayTime       = 200;\r\nconst defaultColor    = '#61dafb';\r\nconst accessListColor = '#f82aff';\r\nconst swapItemColor   = '#34d492'\r\n// const swapItemColor   = '#00ff9d';\r\n\r\nfunction fillArray(value, len) {\r\n    var arr = new Array(len);;\r\n    for (var i = 0; i < len; i++) {\r\n      arr[i] = value;\r\n    }\r\n    return arr;\r\n  }\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            array: Array.from(Array(listSize).keys()),\r\n            colors: fillArray(defaultColor, listSize)\r\n        }\r\n        const {array}    = this.state; \r\n        this.totalWidth  = 70;\r\n        this.totalHeight = 60;\r\n        this.barWidth    = this.totalWidth/array.length;\r\n        this.barHeight   = this.totalHeight/array.length;\r\n    }\r\n\r\n    bubbleSort(arr){\r\n        let tempArr = JSON.parse(JSON.stringify(arr));\r\n        let states = [];\r\n        let colors = [];\r\n        let delays = [];\r\n        let iter   = 0;\r\n        for(let i = 0; i<arr.length; i++){\r\n            for(let j = 0; j<arr.length-i-1; j++){\r\n                iter++;\r\n                let color  = fillArray(defaultColor, listSize);\r\n                color[j]   = accessListColor;\r\n                // color[j+1] = accessListColor;\r\n                colors.push(color);\r\n                states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                delays.push(iter);\r\n                if(tempArr[j]>tempArr[j+1]){\r\n                    iter++;\r\n                    let temp     = tempArr[j];\r\n                    tempArr[j]   = tempArr[j+1];\r\n                    tempArr[j+1] = temp;\r\n                    let color    = fillArray(defaultColor, listSize);\r\n                    color[j+1]     = swapItemColor;\r\n                    // color[j]   = swapItemColor;\r\n                    colors.push(color);\r\n                    states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                    delays.push(iter);\r\n                }\r\n            }\r\n        }\r\n        states.push(states[states.length - 1]);\r\n        colors.push(fillArray(defaultColor, listSize));\r\n        delays.push(iter+1);\r\n        for(let i=0; i<states.length; i++){\r\n            setTimeout(()=>{this.setState(\r\n                    { array: states[i], colors: colors[i] }\r\n                )}, delays[i]*delayTime);\r\n        }\r\n    }\r\n    \r\n    insertionSort(arr){\r\n        let tempArr = JSON.parse(JSON.stringify(arr));\r\n        let states = [];\r\n        let colors = [];\r\n        let delays = [];\r\n        let iter   = 0;\r\n        for(let i = 1; i<arr.length; i++){\r\n            for(let j = i; j>=0; j--){\r\n                iter++;\r\n                let color  = fillArray(defaultColor, listSize);\r\n                color[j]   = accessListColor;\r\n                // color[j+1] = accessListColor;\r\n                colors.push(color);\r\n                states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                delays.push(iter);\r\n                if(tempArr[j]<tempArr[j-1]){\r\n                    iter++;\r\n                    let temp = tempArr[j];\r\n                    tempArr[j] = tempArr[j-1];\r\n                    tempArr[j-1] = temp;\r\n\r\n                    let color    = fillArray(defaultColor, listSize);\r\n                    color[j-1]     = swapItemColor;\r\n                    // color[j+1]   = swapItemColor;\r\n                    colors.push(color);\r\n                    states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                    delays.push(iter);\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        states.push(states[states.length - 1]);\r\n        colors.push(fillArray(defaultColor, listSize));\r\n        delays.push(iter+1);\r\n        for(let i=0; i<states.length; i++){\r\n            setTimeout(()=>{this.setState(\r\n                    { array: states[i], colors: colors[i] }\r\n                )}, delays[i]*delayTime);\r\n        }\r\n    }\r\n\r\n    quickSort(arr){\r\n\r\n    }\r\n\r\n    shuffle(arr) {\r\n        for (var i = arr.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = temp;\r\n        }\r\n        this.setState({array: arr});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render (){\r\n        const {array, colors} = this.state;\r\n        const auxList = Array.from(Array(listSize).keys());\r\n\r\n        return (<div className=\"visualizer-container\">\r\n            <div className=\"array-container\">\r\n                {auxList.map(index => (\r\n                    <Bar key={index} width={this.barWidth -0.5} height={this.barHeight * (array[index]+1)} color={colors[index]}/>\r\n                ))\r\n                }\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button className=\"button\" onClick={()=> {this.shuffle(array);}}>Shuffle Array</button>\r\n                <button className=\"button\" onClick={()=> {this.bubbleSort(array);}}>BubbleSort</button>\r\n                <button className=\"button\" onClick={()=> {this.insertionSort(array)}}>Insertion Sort</button>\r\n                <button className=\"button\" onClick={()=> {alert('Need to finish this');this.quickSort(array,0, array.length-1, 1)}}>Quick Sort</button>\r\n            </div>\r\n      </div>);\r\n    };\r\n  }\r\n  \r\n  export default Visualizer;\r\n  ","import React from 'react';\nimport './App.css';\nimport Visualizer from './visualizer';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-h1\">\n        Sorting Algorithms Visualizer\n      </h1>\n      <Visualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}