{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Louis\\\\Desktop\\\\Sorting Algorithms\\\\sorting-alg-visual\\\\src\\\\visualizer.js\";\nimport React from 'react';\nimport './App.css';\nimport Bar from './bar';\nconst listSize = 10;\nconst delayTime = 30;\nconst defaultColor = '#61dafb';\nconst accessListColor = '#f82aff';\nconst swapItemColor = '#34d492'; // const swapItemColor   = '#00ff9d';\n\nfunction fillArray(value, len) {\n  var arr = new Array(len);\n  ;\n\n  for (var i = 0; i < len; i++) {\n    arr[i] = value;\n  }\n\n  return arr;\n}\n\nclass Visualizer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      array: Array.from(Array(listSize).keys()),\n      colors: fillArray(defaultColor, listSize)\n    };\n    const {\n      array\n    } = this.state;\n    this.totalWidth = 70;\n    this.totalHeight = 60;\n    this.barWidth = this.totalWidth / array.length;\n    this.barHeight = this.totalHeight / array.length;\n  }\n\n  bubbleSort(arr) {\n    let tempArr = JSON.parse(JSON.stringify(arr));\n    let states = [];\n    let colors = [];\n    let delays = [];\n    let iter = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        iter++;\n        let color = fillArray(defaultColor, listSize);\n        color[j] = accessListColor; // color[j+1] = accessListColor;\n\n        colors.push(color);\n        states.push(JSON.parse(JSON.stringify(tempArr)));\n        delays.push(iter);\n\n        if (tempArr[j] > tempArr[j + 1]) {\n          iter++;\n          let temp = tempArr[j];\n          tempArr[j] = tempArr[j + 1];\n          tempArr[j + 1] = temp;\n          let color = fillArray(defaultColor, listSize);\n          color[j + 1] = swapItemColor; // color[j]   = swapItemColor;\n\n          colors.push(color);\n          states.push(JSON.parse(JSON.stringify(tempArr)));\n          delays.push(iter);\n        }\n      }\n    }\n\n    states.push(states[states.length - 1]);\n    colors.push(fillArray(defaultColor, listSize));\n    delays.push(iter + 1);\n\n    for (let i = 0; i < states.length; i++) {\n      setTimeout(() => {\n        this.setState({\n          array: states[i],\n          colors: colors[i]\n        });\n      }, delays[i] * delayTime);\n    }\n  }\n\n  insertionSort(arr) {\n    let tempArr = JSON.parse(JSON.stringify(arr));\n    let states = [];\n    let colors = [];\n    let delays = [];\n    let iter = 0;\n\n    for (let i = 1; i < arr.length; i++) {\n      for (let j = i; j >= 0; j--) {\n        iter++;\n        let color = fillArray(defaultColor, listSize);\n        color[j] = accessListColor; // color[j+1] = accessListColor;\n\n        colors.push(color);\n        states.push(JSON.parse(JSON.stringify(tempArr)));\n        delays.push(iter);\n\n        if (tempArr[j] < tempArr[j - 1]) {\n          iter++;\n          let temp = tempArr[j];\n          tempArr[j] = tempArr[j - 1];\n          tempArr[j - 1] = temp;\n          let color = fillArray(defaultColor, listSize);\n          color[j - 1] = swapItemColor; // color[j+1]   = swapItemColor;\n\n          colors.push(color);\n          states.push(JSON.parse(JSON.stringify(tempArr)));\n          delays.push(iter);\n        } else {\n          break;\n        }\n      }\n    }\n\n    states.push(states[states.length - 1]);\n    colors.push(fillArray(defaultColor, listSize));\n    delays.push(iter + 1);\n\n    for (let i = 0; i < states.length; i++) {\n      setTimeout(() => {\n        this.setState({\n          array: states[i],\n          colors: colors[i]\n        });\n      }, delays[i] * delayTime);\n    }\n  }\n  /*\r\n  quickSort(array, start, end){\r\n      let tempArr = JSON.parse(JSON.stringify(array));\r\n      if(end === -1){\r\n          end = tempArr.length;\r\n      }\r\n      let arr = tempArr.slice(start, end);\r\n      if (arr.length < 2){\r\n          return arr;\r\n      }\r\n      let pivot       = tempArr[end-1];\r\n      let pivot_index = end-1;\r\n      let i           = start;\r\n      let swaps       = 0;\r\n      while (i < pivot_index){\r\n          // iterations[0]+=1;\r\n          // let color  = fillArray(defaultColor, listSize);\r\n          // color[i]   = accessListColor;\r\n          // // color[i+1] = accessListColor;\r\n          // colors.push(color);\r\n          // states.push(JSON.parse(JSON.stringify(tempArr)));\r\n          // delays.push(iterations[0]);\r\n            let num = tempArr[i];\r\n          if (num > pivot){\r\n              tempArr.splice(i, 1);\r\n              tempArr.splice(pivot_index, 0, num);\r\n              console.log(tempArr);\r\n              \r\n              // console.log(tempArr);\r\n              pivot_index-=1;\r\n              swaps+=1;\r\n                // iterations[0]+=1;\r\n              // let color  = fillArray(defaultColor, listSize);\r\n              // color[pivot_index+1]   = swapItemColor;\r\n              // colors.push(color);\r\n              // states.push(JSON.parse(JSON.stringify(tempArr)));\r\n              // delays.push(iterations[0]);\r\n          }\r\n          else{\r\n              i+=1;\r\n          }\r\n      }\r\n      let lesser  = this.quickSort(tempArr, start, pivot_index);\r\n      let greater = this.quickSort(tempArr, pivot_index+1, pivot_index+swaps+1)\r\n      let result = [];\r\n      for(let item in lesser){\r\n          result.push(parseInt(item));\r\n      }\r\n      result.push(pivot);\r\n      for(let item in greater){\r\n          result.push(parseInt(item));\r\n      }\r\n        // states.push(states[states.length - 1]);\r\n      // colors.push(fillArray(defaultColor, listSize));\r\n      // delays.push(iterations[0]+1);\r\n      // for(let i=0; i<states.length; i++){\r\n      //     setTimeout(()=>{this.setState(\r\n      //             { array: states[i], colors: colors[i] }\r\n      //         )}, delays[i]*delayTime);\r\n      // }\r\n      console.log('Result: ', result)\r\n      return result;\r\n  }\r\n  */\n\n\n  quickSort(array, start, end) {\n    let tempArr = JSON.parse(JSON.stringify(array));\n\n    if (end === -1) {\n      end = tempArr.lenght;\n    }\n\n    let arr = tempArr.slice(start, end);\n\n    if (arr.length < 2) {\n      return arr;\n    }\n\n    let pivot = tempArr[end - 1];\n    let pivot_index = end - 1;\n    let i = start;\n    let swaps = 0;\n\n    while (i < pivot_index) {\n      let num = tempArr[i];\n\n      if (num > pivot) {\n        tempArr.splice(i, 1);\n        tempArr.splice(pivot_index, 0, num);\n        console.log(tempArr);\n        pivot_index -= 1;\n        swaps += 1;\n      } else {\n        i += 1;\n      }\n    }\n\n    let result = [];\n    let lesser = this.quickSort(tempArr, start, pivot_index);\n    let greater = this.quickSort(tempArr, pivot_index + 1, pivot_index + swaps + 1);\n\n    for (let item in lesser) {\n      result.push(parseInt(item));\n    }\n\n    result.push(pivot);\n\n    for (let item in greater) {\n      result.push(parseInt(item));\n    }\n\n    console.log(result);\n    return result;\n  }\n\n  shuffle(arr) {\n    for (var i = arr.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n\n    this.setState({\n      array: arr\n    });\n  }\n\n  render() {\n    const {\n      array,\n      colors\n    } = this.state;\n    const auxList = Array.from(Array(listSize).keys());\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"visualizer-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, auxList.map(index => /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      width: this.barWidth - 0.5,\n      height: this.barHeight * (array[index] + 1),\n      color: colors[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        this.shuffle(array);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }\n    }, \"Shuffle Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        this.bubbleSort(array);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }\n    }, \"BubbleSort\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        this.insertionSort(array);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        console.log(array);\n        console.log('Result: ' + this.quickSort(array, 0, -1));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }, \"Quick Sort\")));\n  }\n\n}\n\nexport default Visualizer;","map":{"version":3,"sources":["C:/Users/Louis/Desktop/Sorting Algorithms/sorting-alg-visual/src/visualizer.js"],"names":["React","Bar","listSize","delayTime","defaultColor","accessListColor","swapItemColor","fillArray","value","len","arr","Array","i","Visualizer","Component","constructor","state","array","from","keys","colors","totalWidth","totalHeight","barWidth","length","barHeight","bubbleSort","tempArr","JSON","parse","stringify","states","delays","iter","j","color","push","temp","setTimeout","setState","insertionSort","quickSort","start","end","lenght","slice","pivot","pivot_index","swaps","num","splice","console","log","result","lesser","greater","item","parseInt","shuffle","Math","floor","random","render","auxList","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Bar from './bar';\r\n\r\nconst listSize        = 10;\r\nconst delayTime       = 30;\r\nconst defaultColor    = '#61dafb';\r\nconst accessListColor = '#f82aff';\r\nconst swapItemColor   = '#34d492'\r\n// const swapItemColor   = '#00ff9d';\r\n\r\n\r\nfunction fillArray(value, len) {\r\n    var arr = new Array(len);;\r\n    for (var i = 0; i < len; i++) {\r\n      arr[i] = value;\r\n    }\r\n    return arr;\r\n  }\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            array: Array.from(Array(listSize).keys()),\r\n            colors: fillArray(defaultColor, listSize)\r\n        }\r\n        const {array}    = this.state; \r\n        this.totalWidth  = 70;\r\n        this.totalHeight = 60;\r\n        this.barWidth    = this.totalWidth/array.length;\r\n        this.barHeight   = this.totalHeight/array.length;\r\n    }\r\n\r\n    bubbleSort(arr){\r\n        let tempArr = JSON.parse(JSON.stringify(arr));\r\n        let states = [];\r\n        let colors = [];\r\n        let delays = [];\r\n        let iter   = 0;\r\n        for(let i = 0; i<arr.length; i++){\r\n            for(let j = 0; j<arr.length-i-1; j++){\r\n                iter++;\r\n                let color  = fillArray(defaultColor, listSize);\r\n                color[j]   = accessListColor;\r\n                // color[j+1] = accessListColor;\r\n                colors.push(color);\r\n                states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                delays.push(iter);\r\n                if(tempArr[j]>tempArr[j+1]){\r\n                    iter++;\r\n                    let temp     = tempArr[j];\r\n                    tempArr[j]   = tempArr[j+1];\r\n                    tempArr[j+1] = temp;\r\n                    let color    = fillArray(defaultColor, listSize);\r\n                    color[j+1]     = swapItemColor;\r\n                    // color[j]   = swapItemColor;\r\n                    colors.push(color);\r\n                    states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                    delays.push(iter);\r\n                }\r\n            }\r\n        }\r\n        states.push(states[states.length - 1]);\r\n        colors.push(fillArray(defaultColor, listSize));\r\n        delays.push(iter+1);\r\n        for(let i=0; i<states.length; i++){\r\n            setTimeout(()=>{this.setState(\r\n                    { array: states[i], colors: colors[i] }\r\n                )}, delays[i]*delayTime);\r\n        }\r\n    }\r\n    \r\n    insertionSort(arr){\r\n        let tempArr = JSON.parse(JSON.stringify(arr));\r\n        let states = [];\r\n        let colors = [];\r\n        let delays = [];\r\n        let iter   = 0;\r\n        for(let i = 1; i<arr.length; i++){\r\n            for(let j = i; j>=0; j--){\r\n                iter++;\r\n                let color  = fillArray(defaultColor, listSize);\r\n                color[j]   = accessListColor;\r\n                // color[j+1] = accessListColor;\r\n                colors.push(color);\r\n                states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                delays.push(iter);\r\n                if(tempArr[j]<tempArr[j-1]){\r\n                    iter++;\r\n                    let temp     = tempArr[j];\r\n                    tempArr[j]   = tempArr[j-1];\r\n                    tempArr[j-1] = temp;\r\n\r\n                    let color    = fillArray(defaultColor, listSize);\r\n                    color[j-1]   = swapItemColor;\r\n                    // color[j+1]   = swapItemColor;\r\n                    colors.push(color);\r\n                    states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                    delays.push(iter);\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        states.push(states[states.length - 1]);\r\n        colors.push(fillArray(defaultColor, listSize));\r\n        delays.push(iter+1);\r\n        for(let i=0; i<states.length; i++){\r\n            setTimeout(()=>{this.setState(\r\n                    { array: states[i], colors: colors[i] }\r\n                )}, delays[i]*delayTime);\r\n        }\r\n    }\r\n\r\n    /*\r\n    quickSort(array, start, end){\r\n        let tempArr = JSON.parse(JSON.stringify(array));\r\n        if(end === -1){\r\n            end = tempArr.length;\r\n        }\r\n        let arr = tempArr.slice(start, end);\r\n        if (arr.length < 2){\r\n            return arr;\r\n        }\r\n        let pivot       = tempArr[end-1];\r\n        let pivot_index = end-1;\r\n        let i           = start;\r\n        let swaps       = 0;\r\n        while (i < pivot_index){\r\n            // iterations[0]+=1;\r\n            // let color  = fillArray(defaultColor, listSize);\r\n            // color[i]   = accessListColor;\r\n            // // color[i+1] = accessListColor;\r\n            // colors.push(color);\r\n            // states.push(JSON.parse(JSON.stringify(tempArr)));\r\n            // delays.push(iterations[0]);\r\n\r\n            let num = tempArr[i];\r\n            if (num > pivot){\r\n                tempArr.splice(i, 1);\r\n                tempArr.splice(pivot_index, 0, num);\r\n                console.log(tempArr);\r\n                \r\n                // console.log(tempArr);\r\n                pivot_index-=1;\r\n                swaps+=1;\r\n\r\n                // iterations[0]+=1;\r\n                // let color  = fillArray(defaultColor, listSize);\r\n                // color[pivot_index+1]   = swapItemColor;\r\n                // colors.push(color);\r\n                // states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                // delays.push(iterations[0]);\r\n            }\r\n            else{\r\n                i+=1;\r\n            }\r\n        }\r\n        let lesser  = this.quickSort(tempArr, start, pivot_index);\r\n        let greater = this.quickSort(tempArr, pivot_index+1, pivot_index+swaps+1)\r\n        let result = [];\r\n        for(let item in lesser){\r\n            result.push(parseInt(item));\r\n        }\r\n        result.push(pivot);\r\n        for(let item in greater){\r\n            result.push(parseInt(item));\r\n        }\r\n\r\n        // states.push(states[states.length - 1]);\r\n        // colors.push(fillArray(defaultColor, listSize));\r\n        // delays.push(iterations[0]+1);\r\n        // for(let i=0; i<states.length; i++){\r\n        //     setTimeout(()=>{this.setState(\r\n        //             { array: states[i], colors: colors[i] }\r\n        //         )}, delays[i]*delayTime);\r\n        // }\r\n        console.log('Result: ', result)\r\n        return result;\r\n    }\r\n    */\r\n\r\n    quickSort(array, start, end){\r\n        let tempArr = JSON.parse(JSON.stringify(array));\r\n        if(end === -1){\r\n            end = tempArr.lenght\r\n        }\r\n        let arr = tempArr.slice(start, end)\r\n        if(arr.length < 2){\r\n            return arr;\r\n        }\r\n        let pivot = tempArr[end-1]\r\n        let pivot_index = end - 1;\r\n        let i=start;\r\n        let swaps = 0;\r\n        while(i<pivot_index){\r\n            let num = tempArr[i];\r\n            if(num>pivot){\r\n                tempArr.splice(i, 1);\r\n                tempArr.splice(pivot_index, 0, num);\r\n                console.log(tempArr);\r\n                \r\n                pivot_index-=1;\r\n                swaps+=1;\r\n            }\r\n            else{\r\n                i+=1;\r\n            }\r\n        }\r\n\r\n        let result = [];\r\n        let lesser = this.quickSort(tempArr, start, pivot_index);\r\n        let greater = this.quickSort(tempArr, pivot_index+1, pivot_index+swaps+1);\r\n        for(let item in lesser){\r\n            result.push(parseInt(item));\r\n        }\r\n        result.push(pivot);\r\n        for(let item in greater){\r\n            result.push(parseInt(item));\r\n        }\r\n        console.log(result)\r\n        return result;\r\n    }\r\n\r\n    shuffle(arr) {\r\n        for (var i = arr.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = temp;\r\n        }\r\n        this.setState({array: arr});\r\n    }\r\n\r\n    render (){\r\n        const {array, colors} = this.state;\r\n        const auxList = Array.from(Array(listSize).keys());\r\n\r\n        return (<div className=\"visualizer-container\">\r\n            <div className=\"array-container\">\r\n                {auxList.map(index => (\r\n                    <Bar key={index} width={this.barWidth -0.5} height={this.barHeight * (array[index]+1)} color={colors[index]}/>\r\n                ))\r\n                }\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button className=\"button\" onClick={()=> {this.shuffle(array);}}>Shuffle Array</button>\r\n                <button className=\"button\" onClick={()=> {this.bubbleSort(array);}}>BubbleSort</button>\r\n                <button className=\"button\" onClick={()=> {this.insertionSort(array)}}>Insertion Sort</button>\r\n                <button className=\"button\" onClick={()=> {console.log(array );console.log('Result: ' + this.quickSort(array, 0, -1))}}>Quick Sort</button>\r\n            </div>\r\n      </div>);\r\n    };\r\n  }\r\n  \r\n  export default Visualizer;\r\n  "]},"metadata":{},"sourceType":"module"}