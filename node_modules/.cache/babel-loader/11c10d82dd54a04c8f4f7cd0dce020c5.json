{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Louis\\\\Desktop\\\\Sorting Algorithms\\\\sorting-alg-visual\\\\src\\\\visualizer.js\";\nimport React from 'react';\nimport './App.css';\nimport Bar from './bar';\nconst listSize = 40;\nconst delayTime = 10;\nconst defaultColor = '#61dafb';\nconst accessListColor = '#f82aff';\nconst swapItemColor = '#34d492';\nconst pivotColor = 'white'; // const swapItemColor   = '#00ff9d';\n\nfunction fillArray(value, len) {\n  var arr = new Array(len);\n  ;\n\n  for (var i = 0; i < len; i++) {\n    arr[i] = value;\n  }\n\n  return arr;\n}\n\nclass Visualizer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      array: Array.from(Array(listSize).keys()),\n      colors: fillArray(defaultColor, listSize)\n    };\n    const {\n      array\n    } = this.state;\n    this.totalWidth = 70;\n    this.totalHeight = 60;\n    this.barWidth = this.totalWidth / array.length;\n    this.barHeight = this.totalHeight / array.length;\n  }\n\n  bubbleSort(arr) {\n    let tempArr = JSON.parse(JSON.stringify(arr));\n    let states = [];\n    let colors = [];\n    let delays = [];\n    let iter = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        iter++;\n        let color = fillArray(defaultColor, listSize);\n        color[j] = accessListColor; // color[j+1] = accessListColor;\n\n        colors.push(color);\n        states.push(JSON.parse(JSON.stringify(tempArr)));\n        delays.push(iter);\n\n        if (tempArr[j] > tempArr[j + 1]) {\n          iter++;\n          let temp = tempArr[j];\n          tempArr[j] = tempArr[j + 1];\n          tempArr[j + 1] = temp;\n          let color = fillArray(defaultColor, listSize);\n          color[j + 1] = swapItemColor; // color[j]   = swapItemColor;\n\n          colors.push(color);\n          states.push(JSON.parse(JSON.stringify(tempArr)));\n          delays.push(iter);\n        }\n\n        if (this.isSorted(tempArr)) {\n          break;\n        }\n      }\n    }\n\n    states.push(states[states.length - 1]);\n    colors.push(fillArray(defaultColor, listSize));\n    delays.push(iter + 1);\n\n    for (let i = 0; i < states.length; i++) {\n      setTimeout(() => {\n        this.setState({\n          array: states[i],\n          colors: colors[i]\n        });\n      }, delays[i] * delayTime);\n    }\n  }\n\n  insertionSort(arr) {\n    let tempArr = JSON.parse(JSON.stringify(arr));\n    let states = [];\n    let colors = [];\n    let delays = [];\n    let iter = 0;\n\n    for (let i = 1; i < arr.length; i++) {\n      for (let j = i; j >= 0; j--) {\n        iter++;\n        let color = fillArray(defaultColor, listSize);\n        color[j] = accessListColor; // color[j+1] = accessListColor;\n\n        colors.push(color);\n        states.push(JSON.parse(JSON.stringify(tempArr)));\n        delays.push(iter);\n\n        if (tempArr[j] < tempArr[j - 1]) {\n          iter++;\n          let temp = tempArr[j];\n          tempArr[j] = tempArr[j - 1];\n          tempArr[j - 1] = temp;\n          let color = fillArray(defaultColor, listSize);\n          color[j - 1] = swapItemColor; // color[j+1]   = swapItemColor;\n\n          colors.push(color);\n          states.push(JSON.parse(JSON.stringify(tempArr)));\n          delays.push(iter);\n\n          if (this.isSorted(tempArr)) {\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    states.push(states[states.length - 1]);\n    colors.push(fillArray(defaultColor, listSize));\n    delays.push(iter + 1);\n\n    for (let i = 0; i < states.length; i++) {\n      setTimeout(() => {\n        this.setState({\n          array: states[i],\n          colors: colors[i]\n        });\n      }, delays[i] * delayTime);\n    }\n  }\n\n  quickSort(arr) {\n    let array = JSON.parse(JSON.stringify(arr));\n    var smaller = [];\n    var larger = [];\n    if (array.length <= 1) return array;\n    let pivot = array[array.length - 1];\n\n    for (var i = 0; i < array.length - 1; i++) {\n      if (array[i] <= pivot) {\n        smaller.push(array[i]);\n      } else {\n        larger.push(array[i]);\n      }\n    }\n\n    console.log(smaller, [pivot], larger);\n    return this.quickSort(smaller).concat([pivot]).concat(this.quickSort(larger));\n  }\n\n  quickSort2(arr, start, end, iter) {\n    let array = arr.slice(start, end);\n    let states = [];\n    let colors = [];\n    let delays = [];\n\n    if (array.length < 2 || this.isSorted(array) || this.isSorted(arr)) {\n      return iter;\n    }\n\n    let pivot = arr[end - 1];\n    let pivot_ind = end - 1;\n    let i = start;\n    let swaps = 0;\n\n    while (i < pivot_ind) {\n      iter += 1;\n      let color = fillArray(defaultColor, listSize);\n      color[i] = accessListColor;\n      color[pivot_ind] = pivotColor;\n      colors.push(color);\n      states.push(JSON.parse(JSON.stringify(arr)));\n      delays.push(iter);\n      let num = arr[i];\n\n      if (num > pivot) {\n        iter += 1;\n        arr.splice(i, 1);\n        arr.splice(pivot_ind, 0, num);\n        swaps += 1;\n        pivot_ind -= 1;\n        let color = fillArray(defaultColor, listSize);\n        color[pivot_ind + 1] = swapItemColor;\n        color[pivot_ind] = pivotColor;\n        colors.push(color);\n        states.push(JSON.parse(JSON.stringify(arr)));\n        delays.push(iter);\n      } else {\n        i += 1;\n      }\n    }\n\n    states.push(states[states.length - 1]);\n    colors.push(fillArray(defaultColor, listSize));\n    delays.push(iter + 1);\n\n    for (let i = 0; i < states.length; i++) {\n      setTimeout(() => {\n        this.setState({\n          array: states[i],\n          colors: colors[i]\n        });\n      }, delays[i] * delayTime);\n    }\n\n    iter = this.quickSort2(arr, start, pivot_ind, iter);\n    iter = this.quickSort2(arr, pivot_ind + 1, pivot_ind + swaps + 1, iter);\n    return iter;\n  }\n\n  shuffle(arr) {\n    for (var i = arr.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n\n    this.setState({\n      array: arr\n    });\n  }\n\n  reversedArray() {\n    this.setState({\n      array: Array.from(Array(listSize).keys()).reverse()\n    });\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false;\n\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  }\n\n  isSorted(arr) {\n    return this.arraysEqual(arr, Array.from(Array(arr.length).keys()));\n  }\n\n  render() {\n    let {\n      array,\n      colors\n    } = this.state;\n    const auxList = Array.from(Array(listSize).keys());\n    array = JSON.parse(JSON.stringify(array));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"visualizer-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }, auxList.map(index => /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      width: this.barWidth - 0.5,\n      height: this.barHeight * (array[index] + 1),\n      color: colors[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        this.reversedArray(array);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }, \"Reversed Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        this.shuffle(array);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, \"Shuffle Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        this.bubbleSort(array);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }, \"BubbleSort\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        this.insertionSort(array);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        console.log(array);\n        console.log('Result: ' + this.quickSort2(array, 0, array.length, 0));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }, \"Quick Sort\")));\n  }\n\n}\n\nexport default Visualizer;","map":{"version":3,"sources":["C:/Users/Louis/Desktop/Sorting Algorithms/sorting-alg-visual/src/visualizer.js"],"names":["React","Bar","listSize","delayTime","defaultColor","accessListColor","swapItemColor","pivotColor","fillArray","value","len","arr","Array","i","Visualizer","Component","constructor","state","array","from","keys","colors","totalWidth","totalHeight","barWidth","length","barHeight","bubbleSort","tempArr","JSON","parse","stringify","states","delays","iter","j","color","push","temp","isSorted","setTimeout","setState","insertionSort","quickSort","smaller","larger","pivot","console","log","concat","quickSort2","start","end","slice","pivot_ind","swaps","num","splice","shuffle","Math","floor","random","reversedArray","reverse","arraysEqual","a","b","render","auxList","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Bar from './bar';\r\n\r\nconst listSize        = 40;\r\nconst delayTime       = 10;\r\nconst defaultColor    = '#61dafb';\r\nconst accessListColor = '#f82aff';\r\nconst swapItemColor   = '#34d492'\r\nconst pivotColor      = 'white';\r\n// const swapItemColor   = '#00ff9d';\r\n\r\n\r\nfunction fillArray(value, len) {\r\n    var arr = new Array(len);;\r\n    for (var i = 0; i < len; i++) {\r\n      arr[i] = value;\r\n    }\r\n    return arr;\r\n}\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            array: Array.from(Array(listSize).keys()),\r\n            colors: fillArray(defaultColor, listSize)\r\n        }\r\n        const {array}    = this.state; \r\n        this.totalWidth  = 70;\r\n        this.totalHeight = 60;\r\n        this.barWidth    = this.totalWidth/array.length;\r\n        this.barHeight   = this.totalHeight/array.length;\r\n    }\r\n\r\n    bubbleSort(arr){\r\n        let tempArr = JSON.parse(JSON.stringify(arr));\r\n        let states = [];\r\n        let colors = [];\r\n        let delays = [];\r\n        let iter   = 0;\r\n        for(let i = 0; i<arr.length; i++){\r\n            for(let j = 0; j<arr.length-i-1; j++){\r\n                iter++;\r\n                let color  = fillArray(defaultColor, listSize);\r\n                color[j]   = accessListColor;\r\n                // color[j+1] = accessListColor;\r\n                colors.push(color);\r\n                states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                delays.push(iter);\r\n                if(tempArr[j]>tempArr[j+1]){\r\n                    iter++;\r\n                    let temp     = tempArr[j];\r\n                    tempArr[j]   = tempArr[j+1];\r\n                    tempArr[j+1] = temp;\r\n                    let color    = fillArray(defaultColor, listSize);\r\n                    color[j+1]     = swapItemColor;\r\n                    // color[j]   = swapItemColor;\r\n                    colors.push(color);\r\n                    states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                    delays.push(iter);\r\n                }\r\n                if(this.isSorted(tempArr)){\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        states.push(states[states.length - 1]);\r\n        colors.push(fillArray(defaultColor, listSize));\r\n        delays.push(iter+1);\r\n        for(let i=0; i<states.length; i++){\r\n            setTimeout(()=>{this.setState(\r\n                    { array: states[i], colors: colors[i] }\r\n                )}, delays[i]*delayTime);\r\n        }\r\n    }\r\n    \r\n    insertionSort(arr){\r\n        let tempArr = JSON.parse(JSON.stringify(arr));\r\n        let states = [];\r\n        let colors = [];\r\n        let delays = [];\r\n        let iter   = 0;\r\n        for(let i = 1; i<arr.length; i++){\r\n            for(let j = i; j>=0; j--){\r\n                iter++;\r\n                let color  = fillArray(defaultColor, listSize);\r\n                color[j]   = accessListColor;\r\n                // color[j+1] = accessListColor;\r\n                colors.push(color);\r\n                states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                delays.push(iter);\r\n                if(tempArr[j]<tempArr[j-1]){\r\n                    iter++;\r\n                    let temp     = tempArr[j];\r\n                    tempArr[j]   = tempArr[j-1];\r\n                    tempArr[j-1] = temp;\r\n\r\n                    let color    = fillArray(defaultColor, listSize);\r\n                    color[j-1]   = swapItemColor;\r\n                    // color[j+1]   = swapItemColor;\r\n                    colors.push(color);\r\n                    states.push(JSON.parse(JSON.stringify(tempArr)));\r\n                    delays.push(iter);\r\n                    if(this.isSorted(tempArr)){\r\n                        break;\r\n                    }\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        states.push(states[states.length - 1]);\r\n        colors.push(fillArray(defaultColor, listSize));\r\n        delays.push(iter+1);\r\n        for(let i=0; i<states.length; i++){\r\n            setTimeout(()=>{this.setState(\r\n                    { array: states[i], colors: colors[i] }\r\n                )}, delays[i]*delayTime);\r\n        }\r\n    }\r\n\r\n    quickSort(arr){\r\n        let array = JSON.parse(JSON.stringify(arr));\r\n        var smaller = []; \r\n        var larger = [];\r\n        if (array.length <=1)\r\n            return array;\r\n        let pivot = array[array.length-1];\r\n        for (var i = 0; i < array.length-1; i++) { \r\n            if (array[i] <= pivot){\r\n                smaller.push(array[i]); \r\n            }\r\n            else{\r\n                larger.push(array[i]); \r\n            }\r\n        }\r\n        console.log(smaller, [pivot], larger);\r\n        return this.quickSort(smaller).concat([pivot]).concat(this.quickSort(larger));\r\n    }\r\n\r\n    quickSort2(arr, start, end, iter){\r\n        let array = arr.slice(start, end);\r\n        let states = [];\r\n        let colors = [];\r\n        let delays = [];\r\n        if (array.length < 2 || this.isSorted(array) || this.isSorted(arr)){\r\n            return iter;\r\n        }\r\n        let pivot     = arr[end-1];\r\n        let pivot_ind = end-1;\r\n        let i = start;\r\n        let swaps = 0;\r\n        while(i < pivot_ind) { \r\n            iter+=1;\r\n            let color  = fillArray(defaultColor, listSize);\r\n            color[i]   = accessListColor;\r\n            color[pivot_ind] = pivotColor;\r\n            colors.push(color);\r\n            states.push(JSON.parse(JSON.stringify(arr)));\r\n            delays.push(iter);\r\n            let num = arr[i];\r\n            if (num > pivot){ \r\n                iter+=1;\r\n                arr.splice(i, 1);\r\n                arr.splice(pivot_ind, 0, num);\r\n                swaps+=1;\r\n                pivot_ind-=1;\r\n                let color  = fillArray(defaultColor, listSize);\r\n                color[pivot_ind+1]   = swapItemColor;\r\n                color[pivot_ind] = pivotColor;\r\n                colors.push(color);\r\n                states.push(JSON.parse(JSON.stringify(arr)));\r\n                delays.push(iter);\r\n            }\r\n            else{\r\n                i+=1;\r\n            }\r\n        }\r\n        states.push(states[states.length - 1]);\r\n        colors.push(fillArray(defaultColor, listSize));\r\n        delays.push(iter+1);\r\n        for(let i=0; i<states.length; i++){\r\n            setTimeout(()=>{this.setState(\r\n                    { array: states[i], colors: colors[i] }\r\n                )}, delays[i]*delayTime);\r\n        }\r\n        iter = this.quickSort2(arr, start, pivot_ind, iter);\r\n        iter = this.quickSort2(arr, pivot_ind+1, pivot_ind+swaps+1, iter);\r\n        return iter;\r\n    }\r\n    shuffle(arr) {\r\n        for (var i = arr.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = temp;\r\n        }\r\n        this.setState({array: arr});\r\n    }\r\n\r\n    reversedArray(){\r\n        this.setState({array: Array.from(Array(listSize).keys()).reverse()});\r\n    }\r\n\r\n    arraysEqual(a, b) {\r\n        if (a === b) return true;\r\n        if (a == null || b == null) return false;\r\n        if (a.length !== b.length) return false;\r\n      \r\n        for (var i = 0; i < a.length; ++i) {\r\n          if (a[i] !== b[i]) return false;\r\n        }\r\n        return true;\r\n      }\r\n\r\n    isSorted(arr){\r\n        return this.arraysEqual(arr, Array.from(Array(arr.length).keys()));\r\n    }\r\n\r\n    render (){\r\n        let {array, colors} = this.state;\r\n        const auxList = Array.from(Array(listSize).keys());\r\n        array = JSON.parse(JSON.stringify(array));\r\n\r\n        return (<div className=\"visualizer-container\">\r\n            <div className=\"array-container\">\r\n                {auxList.map(index => (\r\n                    <Bar key={index} width={this.barWidth -0.5} height={this.barHeight * (array[index]+1)} color={colors[index]}/>\r\n                ))\r\n                }\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button className=\"button\" onClick={()=> {this.reversedArray(array);}}>Reversed Array</button>\r\n                <button className=\"button\" onClick={()=> {this.shuffle(array);}}>Shuffle Array</button>\r\n                <button className=\"button\" onClick={()=> {this.bubbleSort(array);}}>BubbleSort</button>\r\n                <button className=\"button\" onClick={()=> {this.insertionSort(array)}}>Insertion Sort</button>\r\n                <button className=\"button\" onClick={()=> {console.log(array );console.log('Result: ' + this.quickSort2(array, 0, array.length, 0))}}>Quick Sort</button>\r\n            </div>\r\n      </div>);\r\n    };\r\n  }\r\n  \r\n  export default Visualizer;\r\n  "]},"metadata":{},"sourceType":"module"}